#!/bin/bash

# NOTE: these are the mac implementations - might need to be different for Linux
# support

# if you want to contribute a new stat, or update an existing one, use the
# print_line function, which takes two arguments - the name of the thing you
# want to print (Disk Size, etc) and the value (10GB, etc)
# make sure that the new function is being called in main(), and you should be
# all set!

# TO DELETE THE \r CREATED IN WINDOWS RUN THE COMMAND BELOW IN LINUX
# sed -i 's/\r//' <name of bash file>

topl='+-------System Summary---------+'
dusg='+----------Disk Info-----------+'
meml='+---------Memory Info----------+'
line='--------------------------'
bott='+------------------------------+'

HOST_NAME=`uname`


print_line() {
  let "val = ${#1} + ${#2}"
  printf "| \e[1;36m%s\e[m %s \e[1;36m%s\e[m |\n" $1 ${line:$val} $2
}

disk_usage() {
  if [ $HOST_NAME = 'Darwin' ]; then
    DISK_INFO=`df -h | head -n2 | tail -n1 | awk '{print $2,$3,$4}'`
    DISK_TOTAL=`echo $DISK_INFO | awk '{print $1}'`
    DISK_USED=`echo $DISK_INFO | awk '{print $2}'`
    DISK_AVAL=`echo $DISK_INFO | awk '{print $3}'`
  else
    DISK_INFO=$(df -h | head -n2 | tail -n1 | awk '{print $2,$3,$4}')
    DISK_TOTAL=$(echo $DISK_INFO | awk '{print $1}')
    DISK_USED=$(echo $DISK_INFO | awk '{print $2}')
    DISK_AVAL=$(echo $DISK_INFO | awk '{print $3}')
  fi

  echo $dusg
  print_line "Size" $DISK_TOTAL
  print_line "Used" $DISK_USED
  print_line "Avaliable" $DISK_AVAL
}

mem_usage() {
  if [ $HOST_NAME = 'Darwin' ]; then
    # For some reason top takes a bit to run, find a faster way?
    MEM_INFO=`top -l 1 -s 0 | grep "PhysMem" | awk '{print $2,$6}'`
    MEM_USED=`echo $MEM_INFO | awk '{print $1}'`
    MEM_FREE=`echo $MEM_INFO | awk '{print $2}'`
  else
    MEM_USED=$(free | awk 'FNR == 2 {print $3}')
    MEM_FREE=$(free | awk 'FNR == 2 {print $4}')
  fi
  echo $meml
  print_line "Used" $MEM_USED
  print_line "Free" $MEM_FREE
}

docker_info() {
  # TODO add docker imlementaion üê≥
  echo "Docker not supported"
}

tmux_info() {
  # TODO add tmux implementation
  # add 1. the list of tmux sessions running
  echo "Tmux not supported"
}

uptime_info() {
  if [ $HOST_NAME = 'Darwin' ]; then
    UPTIME=`w | tail -n1 | awk '{print $5}'`
  else
    UPTIME=$(w | tail -n1 | awk '{print $5}')
  fi
  print_line "Uptime" $UPTIME
}

main() {
  echo $topl
  uptime_info
  disk_usage
  mem_usage
  echo $bott
}

main
